# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.
#
# See the "example.cfg" file for description of common config parameters.


######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro START_PRINT]
default_parameter_BED_TEMP: 60
default_parameter_EXTRUDER_TEMP: 190
gcode:
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84


######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

[output_pin BEEPER_pin]
pin: ar37
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
scale: 1000
#   PWM parameter will be in the range of (0-1000 Hz).
#   Although not pitch perfect.

[gcode_macro M300]
default_parameter_S: 1000
#   Use a default 1kHz tone if S is omitted.
default_parameter_P: 100
#   Use a 10ms duration is P is omitted.
gcode:
    SET_PIN PIN=BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
default_parameter_X: 50
default_parameter_Y: 0
default_parameter_Z: 10
gcode:
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# BME280 Environmental Sensor
######################################################################

# The macro below assumes you have a BME280 sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: BME280
#gcode_id: AMB
#
# Note the format of the parameter SENSOR in the macro below.  The BME280
# sensor status can be accessed using the format "bme280 <section_name>".
# The example section above is named "my_sensor", thus the bme280 can be
# queried as follows:
#
# QUERY_BME280 SENSOR='bme280 my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_BME280
# as well.

[gcode_macro QUERY_BME280]
default_parameter_SENSOR: bme280 my_sensor
gcode:
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            printer[SENSOR].temperature,
            printer[SENSOR].pressure,
            printer[SENSOR].humidity))}

######################################################################
# HTU21D family Environmental Sensor
######################################################################

# The macro below assumes you have a HTU21D sensor_type defined in one
# of the applicable sections in printer.cfg, such as:
#
#[temperature_sensor my_sensor]
#sensor_type: HTU21D
#
# Note the format of the parameter SENSOR in the macro below.  The HTU21D
# sensor status can be accessed using the format "htu21d <section_name>".
# The example section above is named "my_sensor", thus the htu21d can be
# queried as follows:
#
# QUERY_HTU21D SENSOR='htu21d my_sensor'
#
# Since a default parameter is defined one could simply enter QUERY_HTU21D
# as well.

[gcode_macro QUERY_HTU21D]
default_parameter_SENSOR: htu21d my_sensor
gcode:
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Humidity: %.2f%%" % (
            printer[SENSOR].temperature,
            printer[SENSOR].humidity))}

######################################################################
# Shared Hot End Dual Extruder
######################################################################

# This example assumes you have [extruder] and [extruder1] defined in
# printer.cfg. The [extruder1] should have "shared_heater: extruder"
# included in its definition.
#
# Move Z height up a little to prevent hot end sitting on existing
# layers
#
# Simple implementation.

[gcode_macro T0]
gcode:
    SAVE_GCODE_STATE NAME=change_extruder
    G91
#   relative movements
    G1 Z10 F1000
#   Move Z up a little
    G1 E-100 F1000
#   retract extruder1 desired amount before switching
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    G1 E100 F500
#   un-retract filament to printing position
    RESTORE_GCODE_STATE NAME=change_extruder MOVE=1 F1000

[gcode_macro T1]
gcode:
    SAVE_GCODE_STATE NAME=change_extruder
    G91
    G1 Z10 F1000
    G1 E-100 F1000
#   retract extruder0 desired amount before switching
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    G1 E100 F500
    RESTORE_GCODE_STATE NAME=change_extruder MOVE=1


# Some setups may require a little more complexity to keep track of
# the extruder filament position. 
#
# The delayed_gcode macro initializes a variable for keeping track of
# filament in load/unload positions.

[delayed_gcode FILAMENT_POS]
initial_duration: 0.2
variable_filament0_stow: -100.0
variable_filament1_stow: -100.0
#   Change the above variables to your filament stow positions
#   relative to hot end
variable_filament0_pos: -100.0
variable_filament1_pos: -100.0
#   will track current stow position

[gcode_macro T0]
gcode:
    SAVE_GCODE_STATE NAME=change_extruder
    G91
    G1 Z10 F1000
    {% if not printer["gcode_macro FILAMENT_POS"].filament1_pos == 
      printer["gcode_macro FILAMENT_POS"].filament1_stow %}
#   Check if filament stowed
        G92 E0
#       Set filament position to 0
        M83
#       Make filament moves relative
        G1 E-100 F1000
        SET_GCODE_VARIALE MACRO=FILAMENT_POS VARIABLE=filament1_pos ==
          printer["gcode_macro FILAMENT_POS"].filament1_stow
#       record the move position to the tracking variable
    {% endif $}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    G92 E(printer["gcode_macro FILAMENT_POS"].filament0_pos)
#   recall extruder filament position
    M82
    G90
#   Make extruder moves absolute
    G1 E0 F500
#   Move filament to nozzle position
    RESTORE_GCODE_STATE NAME=change_extruder MOVE=1
#   Restore attributes including position

[gcode_macro T1]
gcode:
    SAVE_GCODE_STATE NAME=change_extruder
    G91
    G1 Z10 F1000
    {% if not printer["gcode_macro FILAMENT_POS"].filament0_pos == 
      printer["gcode_macro FILAMENT_POS"].filament0_stow %}
        G92 E0
        M83
        G1 E-100 F1000
        SET_GCODE_VARIALE MACRO=FILAMENT_POS VARIABLE=filament0_pos ==
          printer["gcode_macro FILAMENT_POS"].filament0_stow
    {% endif $}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    G92 E(printer["gcode_macro FILAMENT_POS"].filament1_pos)
    M82
    G90
    G1 E0 F500
    RESTORE_GCODE_STATE NAME=change_extruder MOVE=1
