# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.


#[tmc2209 stepper_x]
#uart_pin: ar100:33
#uart_address: 0
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_y]
#uart_pin: ar100:33
#uart_address: 1
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z]
#uart_pin: ar100:33
#uart_address: 3
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z1]
#uart_pin: ar100:33
#uart_address: 2
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z2]
#uart_pin: ar100:34
#uart_address: 1
#uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z3]
#uart_pin: ar100:34
#uart_address: 0
#uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250


# Micro-controller information.
[mcu]
serial: /dev/ttyS4
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 38400
#   The baud rate to use. The default is 250000.
#pin_map: none
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
restart_method: pin
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.


[static_digital_output my_output_pins]
pins: PA13, PB2, PB5, PB6, !ar100:PG1, ar100:PG11
#   A comma separated list of pins to be set as GPIO output pins. The
#   pin will be set to a high level unless the pin name is prefaced
#   with "!". This parameter must be provided.

[mcu ar100]
pin_map: ar100
serial: /dev/ttyS1
baud: 1500000
restart_method: script

[recore]
revision: A1
host_mcu: mcu
enable_pin: !ar100:PG2

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_a]
step_pin: ar100:PE0
dir_pin: ar100:PE8
endstop_pin: !ar100:PL4
step_distance: .0225
homing_speed: 30
position_endstop: 228.7
arm_length: 215

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_b]
step_pin: ar100:PE1
dir_pin: ar100:PE9
endstop_pin: !ar100:PL5
step_distance: .0225
homing_speed: 30

[stepper_c]
step_pin: ar100:PE2
dir_pin: ar100:PE10
endstop_pin: !ar100:PL6
step_distance: .0225
homing_speed: 30


# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: ar100:PE3
dir_pin: ar100:PE11
step_distance: 0.005
nozzle_diameter: 0.400
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.75
#   The nominal diameter of the raw filament (in mm) as it enters the
#   extruder. This parameter must be provided.
#max_extrude_cross_section:
#   Maximum area (in mm^2) of an extrusion cross section (eg,
#   extrusion width multiplied by layer height). This setting prevents
#   excessive amounts of extrusion during relatively small XY moves.
#   If a move requests an extrusion rate that would exceed this value
#   it will cause an error to be returned. The default is: 4.0 *
#   nozzle_diameter^2
#instantaneous_corner_velocity: 1.000
#   The maximum instantaneous velocity change (in mm/s) of the
#   extruder during the junction of two moves. The default is 1mm/s.
#max_extrude_only_distance: 50.0
#   Maximum length (in mm of raw filament) that a retraction or
#   extrude-only move may have. If a retraction or extrude-only move
#   requests a distance greater than this value it will cause an error
#   to be returned. The default is 50mm.
#max_extrude_only_velocity:
#max_extrude_only_accel:
#   Maximum velocity (in mm/s) and acceleration (in mm/s^2) of the
#   extruder motor for retractions and extrude-only moves. These
#   settings do not have any impact on normal printing moves. If not
#   specified then they are calculated to match the limit an XY
#   printing move with a cross section of 4.0*nozzle_diameter^2 would
#   have.
#pressure_advance: 0.0
#   The amount of raw filament to push into the extruder during
#   extruder acceleration. An equal amount of filament is retracted
#   during deceleration. It is measured in millimeters per
#   millimeter/second. The default is 0, which disables pressure
#   advance.
#pressure_advance_smooth_time: 0.040
#   A time range (in seconds) to use when calculating the average
#   extruder velocity for pressure advance. A larger value results in
#   smoother extruder movements. This parameter may not exceed 200ms.
#   This setting only applies if pressure_advance is non-zero. The
#   default is 0.040 (40 milliseconds).
#
# The remaining variables describe the extruder heater.
heater_pin: PA8
#   PWM output pin controlling the heater. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   heater_pin may be set to. The value 1.0 allows the pin to be set
#   fully enabled for extended periods, while a value of 0.5 would
#   allow the pin to be enabled for no more than half the time. This
#   setting may be used to limit the total power output (over extended
#   periods) to the heater. The default is 1.0.
sensor_type: EPCOS 100K B57560G104F
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "NTC 100K beta 3950", "Honeywell 100K
#   135-104LAG-J01", and "NTC 100K MGB18-104F39050L32". See the
#   example-extras.cfg file for other sensors. This parameter must be
#   provided.
sensor_pin: PA0
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#pullup_resistor: 4700
#   The resistance (in ohms) of the pullup attached to the thermistor.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 4700 ohms.
#inline_resistor: 0
#   The resistance (in ohms) of an extra (not heat varying) resistor
#   that is placed inline with the thermistor. It is rare to set this.
#   This parameter is only valid when the sensor is a thermistor. The
#   default is 0 ohms.
#smooth_time: 2.0
#   A time value (in seconds) over which temperature measurements will
#   be smoothed to reduce the impact of measurement noise. The default
#   is 2 seconds.
control: pid
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
pid_Kp: 22.2
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
pid_Ki: 1.08
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
pid_Kd: 114
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_integral_max:
#   The maximum "windup" the integral term may accumulate. The default
#   is to use the same value as max_power.
#pwm_cycle_time: 0.100
#   Time in seconds for each software PWM cycle of the heater. It is
#   not recommended to set this unless there is an electrical
#   requirement to switch the heater faster than 10 times a second.
#   The default is 0.100 seconds.
min_extrude_temp: 30
#   The minimum temperature (in Celsius) at which extruder move
#   commands may be issued. The default is 170 Celsius.
min_temp: 0
max_temp: 300
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an
#   error. These parameters must be provided.

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: PA11
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA3
control: watermark
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
min_temp: 0
max_temp: 300

[heater_fan extruder_cooler_fan]
pin: PB0

# Print cooling fan (omit section if fan not present).
[fan]
pin: PB1
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan spinning).
#   The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.



[output_pin fan2]
pin: PB3

[output_pin fan3]
pin: PB4

#[output_pin en12v]
#pin: PG7


[temperature_sensor board]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA6
gcode_id: Board

[adc_temperature v]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor voltage]
sensor_pin: PA4
sensor_type: v
gcode_id: Voltage

[adc_temperature current]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor current]
sensor_pin: PA5
sensor_type: current
gcode_id: Current

[printer]
kinematics: delta
max_velocity: 500
max_accel: 3000
max_z_velocity: 200
delta_radius: 99.8
