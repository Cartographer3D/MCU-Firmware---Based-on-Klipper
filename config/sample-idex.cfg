# This file contains configuration snippets for a dual extruder
# printer using dual carriages (an "IDEX" printer).

# The most common IDEX setup is to have 2 X carraiges, but 2 Y
# carraiges is also possible on a cartesian printer. You will need
# to update the macros and stepper definitions accordingly to do this.

# See docs/Config_Reference.md for a description of parameters.
# See docs/Dual_Carriage.md for further details on certain modules in
# this document.

# Definition for the primary carriage (holding the primary extruder)
[stepper_x]
step_pin: ar54
dir_pin: ar55
enable_pin: !ar38
microsteps: 16
rotation_distance: 40
endstop_pin: ^ar3
position_endstop: 0
position_max: 200
homing_speed: 50

# The definition for the primary extruder
[extruder]
step_pin: ar26
dir_pin: ar28
enable_pin: !ar24
microsteps: 16
rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: ar10
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog13
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 250

# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
    SAVE_GCODE_STATE NAME=park0
    G90
    G1 X0
    RESTORE_GCODE_STATE NAME=park0

# Activate the primary extruder
[gcode_macro T0]
variable_offset_applied: 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if "x" in printer.toolhead.homed_axes %} # this check ensures compatibility with Cura
        PARK_{printer.toolhead.extruder}
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder"].speed * 255}
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
    {% if printer["gcode_macro T0"].offset_applied == 1 %}
        SET_GCODE_OFFSET  X_ADJUST={ -(svv.xoffset) } Y_ADJUST={ -(svv.yoffset) }
        SET_GCODE_OFFSET Z_ADJUST={ -(svv.zoffset) } MOVE=1
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=0
    {% endif %}
#    SET_INPUT_SHAPER if nessesary, reset the input shaper after using the second extruder

# Definition for the secondary carriage (holding the secondary extruder)
[dual_carriage]
axis: x
step_pin: ar16
dir_pin: ar17
enable_pin: !ar23
microsteps: 16
rotation_distance: 40
endstop_pin: ^ar2
position_endstop: 200
position_max: 200
homing_speed: 50

# The definition for the secondary extruder
[extruder1]
step_pin: ar36
dir_pin: ar34
enable_pin: !ar30
microsteps: 16
rotation_distance: 33.500
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: ar11
sensor_type: EPCOS 100K B57560G104F
sensor_pin: analog15
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 250

[gcode_macro PARK_extruder1]
gcode:
    SAVE_GCODE_STATE NAME=park1
    G90
    G1 X200
    RESTORE_GCODE_STATE NAME=park1

[gcode_macro T1]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if "x" in printer.toolhead.homed_axes %} # this check ensures compatibility with Cura
        PARK_{printer.toolhead.extruder}
    {% endif %}
    {% set fan_speed = printer["gcode_macro M106"].swap_speed %}
      {% if fan_speed != -1 %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={fan_speed}
      {% else %}
        # Update core Klipper's fan speed to the fan speed of the active toolhead
        # Only do this if you have a sacrificial [fan] section
        M106.1 S{printer["fan_generic fan_extruder1"].speed * 255}
    {% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    {% if printer["gcode_macro T0"].offset_applied == 0 %}
        SET_GCODE_OFFSET  X_ADJUST={ svv.xoffset } Y_ADJUST={ svv.yoffset }
        SET_GCODE_OFFSET Z_ADJUST={ svv.zoffset } MOVE=1
        SET_GCODE_VARIABLE MACRO=T0 VARIABLE=offset_applied VALUE=1
    {% endif %}
#    SET_INPUT_SHAPER if nessesary, update input shaping for the second carraige

# YOU MUST CALIBRATE YOUR ROTATION_DISTANCE BEFORE THIS IS USEFUL!!!
# Configure this to draw 2 line segments perpendicular to the dual_carraige axis
# that meet in the middle of the bed. Both lines should have the same coordinate
# on the axis of the dual_carraige. If they don't print inline, adjust your endstop
# settings.
[gcode_macro set_separation]
gcode:
    {% set svv = printer.save_variables.variables %}

    {% set oldX = svv.xoffset|float %}
    {% set oldY = svv.yoffset|float %}
    {% set oldZ = svv.zoffset|float %}

    {% if params.X is defined %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ params.X|float }
    {% endif %}

    {% if params.Y is defined %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ params.Y|float }
    {% endif %}

    {% if params.Z is defined %}
        SAVE_VARIABLE VARIABLE=zoffset VALUE={ params.Z|float }
    {% endif %}

    {% if params.X_ADJUST is defined %}
        {% set newX = params.X_ADJUST|float + oldX %}
        SAVE_VARIABLE VARIABLE=xoffset VALUE={ newX|float }
    {% endif %}

    {% if params.Y_ADJUST is defined %}
        {% set newY = params.Y_ADJUST|float + oldY %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newY|float }
    {% endif %}

    {% if params.Z_ADJUST is defined %}
        {% set newZ = params.Z_ADJUST|float + oldZ %}
        SAVE_VARIABLE VARIABLE=yoffset VALUE={ newZ|float }
    {% endif %}

[gcode_macro calibrate_separation]
gcode:
    G28
    G90
    M83
    T0 ; test T0
    G1 X120 Y150 Z.2 F4800
    G1 Y75 E10
    T1 ; test T1
    G1 X120 Y0 Z.2
    G1 Y75 E10

# The following is for if your carraiges have their own part cooling fans.
# Since this macro overrides M106, you cannot also have a [fan] section defined.
# If your printer only has one part cooling fan, don't copy this section
[fan_generic part_fan_0]
pin: PE5

[fan_generic part_fan_1]
pin: PD13

# For completeness, you can add a [fan] section with an unused pin
[fan]
pin: rpi:gpio20

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
    {% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
    {% set p = params.P|default(-1)|int %}
    {% set speed = s / 255 %}

    # Set speed to -1 by default
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

    {% if p == -1 %}
      # Set current active extruder fan
      {% if speed == 0 %}
        # Always turn off al fans if S0 is specified without a specific fan
        SET_FAN_SPEED FAN=fan_extruder SPEED=0
        SET_FAN_SPEED FAN=fan_extruder1 SPEED=0
      {% else %}
        # Opt into fan speed swop control
        SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
        SET_FAN_SPEED FAN=fan_{printer.toolhead.extruder} SPEED={speed}
      {% endif %}
    {% else %}
      # Set specified active extruder fan
      {% if p == 0 %}
        SET_FAN_SPEED FAN=fan_extruder SPEED={speed}
      {% else %}
        SET_FAN_SPEED FAN=fan_extruder1 SPEED={speed}
      {% endif %}
    {% endif %}

    # Update core Klipper's fan speed
    # Only do this if you have a sacrificial [fan] section
    M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}

[gcode_macro M107]
rename_existing: M107.1
gcode:
    {% set p = params.P|default(-1)|int %}
    M106 S0 P{p}

[save_variables]
filename: ~/klipper_config/variables.klip
# this is used for saving and restoring the idex offsets
# create the file and insert the folloring content (without the #) to start
#
# [Variables]
# xoffset = 0.0
# yoffset = 0.0
# zoffset = 0.0
