# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.

# Works for Recore revision A3 and A4

#[tmc2209 stepper_x]
#uart_pin: ar100:33
#uart_address: 0
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_y]
#uart_pin: ar100:33
#uart_address: 1
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z]
#uart_pin: ar100:33
#uart_address: 3
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z1]
#uart_pin: ar100:33
#uart_address: 2
#uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z2]
#uart_pin: ar100:34
#uart_address: 1
#uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250

#[tmc2209 stepper_z3]
#uart_pin: ar100:34
#uart_address: 0
#uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250


# Micro-controller information.
[mcu]
serial: /dev/ttyS4
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 38400
#   The baud rate to use. The default is 250000.
#pin_map: none
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
restart_method: pin
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.


[static_digital_output my_output_pins]
pins: PA12, !ar100:PG1, ar100:PG11
#   A comma separated list of pins to be set as GPIO output pins. The
#   pin will be set to a high level unless the pin name is prefaced
#   with "!". This parameter must be provided.

[mcu ar100]
pin_map: ar100
serial: /dev/ttyS1
baud: 1500000
restart_method: script

[recore]
revision: A1
host_mcu: mcu
enable_pin: !ar100:PG2

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_a]
step_pin: ar100:PL4
dir_pin: ar100:PE8
endstop_pin: !ar100:PH9
step_distance: .025
homing_speed: 30
position_endstop: 254.2
arm_length: 215


# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_b]
step_pin: ar100:PL5
dir_pin: ar100:PE9
endstop_pin: !ar100:PH8
step_distance: .025
homing_speed: 30

[stepper_c]
step_pin: ar100:PL6
dir_pin: ar100:PE10
endstop_pin: !ar100:PH7
step_distance: .025
homing_speed: 30

# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: ar100:PL7
dir_pin: ar100:PE11
step_distance: 0.005
nozzle_diameter: 0.400
filament_diameter: 1.75
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_extrude_temp: 30
min_temp: 0
max_temp: 300

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: PA11
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA3
control: watermark
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
min_temp: 0
max_temp: 300

[heater_fan extruder_cooler_fan]
pin: PB0

# Print cooling fan (omit section if fan not present).
[fan]
pin: PB1
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan spinning).
#   The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.



[output_pin fan2]
pin: PB3

[output_pin fan3]
pin: PB4

#[output_pin en12v]
#pin: PG7


[temperature_sensor board]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA6
gcode_id: Board

[adc_temperature v]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor voltage]
sensor_pin: PA4
sensor_type: v
gcode_id: Voltage

[adc_temperature current]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor current]
sensor_pin: PA5
sensor_type: current
gcode_id: Current

[printer]
kinematics: delta
max_velocity: 500
max_accel: 3000
max_z_velocity: 200
delta_radius: 99.8
minimum_z_position: -5

[probe]
pin: ar100:PH4
z_offset: -0.1

[delta_calibrate]
radius: 30

