# This file serves as documentation for config parameters. One may
# copy and edit this file to configure a new cartesian style
# printer. For delta style printers, see the "example-delta.cfg"
# file. For corexy/h-bot style printers, see the "example-corexy.cfg"
# file. Only common config sections are described here - see the
# "example-extras.cfg" file for configuring less common devices.

# DO NOT COPY THIS FILE WITHOUT CAREFULLY READING AND UPDATING IT
# FIRST. Incorrectly configured parameters may cause damage.

# A note on pin names: pins may be configured with a hardware name
# (such as "PA4") or with an Arduino alias name (such as "ar29" or
# "analog3"). In order to use Arduino names, the pin_map variable in
# the mcu section must be present and have a value of "arduino". Pin
# names may be preceded by an '!' to indicate that a reverse polarity
# should be used (eg, trigger on low instead of high). Input pins may
# be preceded by a '^' to indicate that a hardware pull-up resistor
# should be enabled for the pin. If the micro-controller supports
# pull-down resistors then an input pin may alternatively be preceded
# by a '~'.


#[tmc2209 stepper_x]
#uart_pin: ar100:33
#uart_address: 0
##uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250
#
#[tmc2209 stepper_y]
#uart_pin: ar100:33
#uart_address: 1
##uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250
#
#[tmc2209 stepper_z]
#uart_pin: ar100:33
#uart_address: 3
##uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250
#
#[tmc2209 stepper_z1]
#uart_pin: ar100:33
#uart_address: 2
##uart_tty: 2
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250
#
#[tmc2209 stepper_z2]
#uart_pin: ar100:34
#uart_address: 1
##uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250
#
#[tmc2209 stepper_z3]
#uart_pin: ar100:34
#uart_address: 0
##uart_tty: 3
#microsteps: 16
#run_current: 0.100
#hold_current: 0.100
#stealthchop_threshold: 250


# Micro-controller information.
[mcu]
serial: /dev/ttyS3
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ. The
#   default is /dev/ttyS0
baud: 38400
#   The baud rate to use. The default is 250000.
#pin_map: none
#   This option may be used to enable Arduino pin name aliases. The
#   default is to not enable the aliases.
restart_method: command
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'rpi_usb', and
#   'command'. The 'arduino' method (toggle DTR) is common on Arduino
#   boards and clones. The 'rpi_usb' method is useful on Raspberry Pi
#   boards with micro-controllers powered over USB - it briefly
#   disables power to all USB ports to accomplish a micro-controller
#   reset. The 'command' method involves sending a Klipper command to
#   the micro-controller so that it can reset itself. The default is
#   'arduino' if the micro-controller communicates over a serial port,
#   'command' otherwise.


[static_digital_output my_output_pins]
pins: PA13, PB2, PB5, PB6, !ar100:PG1, ar100:PG11

#   A comma separated list of pins to be set as GPIO output pins. The
#   pin will be set to a high level unless the pin name is prefaced
#   with "!". This parameter must be provided.

[mcu ar100]
pin_map: ar100
serial: /dev/ttyS1
baud: 1500000

[recore]
revision: A1
host_mcu: mcu
enable_pin: !ar100:PG2

# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: ar100:PE0
dir_pin: ar100:PE8
step_distance: .0225
endstop_pin: ar100:PL4
position_endstop: 0
position_max: 200
homing_speed: 2.0

# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_y]
step_pin: ar100:PE1
dir_pin: ar100:PE9
step_distance: .0225
endstop_pin: ar100:PL5
position_endstop: 0
position_max: 200
homing_speed: 2.0

# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot. It has the same settings as the
# stepper_x section.
[stepper_z]
step_pin: ar100:PE2
dir_pin: !ar100:PE10
#enable_pin: !ar62
step_distance: .0225
endstop_pin: ar100:PL6
position_endstop: 0
position_max: 200
homing_speed: 2.0


# The extruder section is used to describe both the stepper
# controlling the printer extruder and the heater parameters for the
# nozzle. The stepper configuration has the same settings as the
# stepper_x section and the heater configuration has the same settings
# as the heater_bed section (described below).
[extruder]
step_pin: ar100:PE3
dir_pin: ar100:PE11
#enable_pin: !ar24
step_distance: .0225
nozzle_diameter: 0.400
#endstop_pin: ar100:PL7
filament_diameter: 1.75
heater_pin: PA8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 300

# The heater_bed section describes a heated bed (if present - omit
# section if not present).
[heater_bed]
heater_pin: PA11
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA3
control: watermark
min_temp: 0
max_temp: 300

[extruder1]
step_pin: ar100:PF2
dir_pin: ar100:PF3
#enable_pin: !ar24
step_distance: .004242
nozzle_diameter: 0.500
filament_diameter: 1.75

heater_pin: PA9
sensor_pin: PA1
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 210

[extruder2]
step_pin: ar100:PF4
dir_pin: ar100:PF5
step_distance: .004242
nozzle_diameter: 0.500
#   Diameter of the nozzle orifice (in mm). This parameter must be
#   provided.
filament_diameter: 1.75

heater_pin: PA10
sensor_pin: PA2
sensor_type: EPCOS 100K B57560G104F
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 210


# Print cooling fan (omit section if fan not present).
[fan]
pin: PB0
#   PWM output pin controlling the fan. This parameter must be
#   provided.
#max_power: 1.0
#shutdown_speed: 0
#cycle_time: 0.010
#hardware_pwm: False
#kick_start_time: 0.100
#off_below: 0.0

[output_pin fan1]
pin: PB1

[output_pin fan2]
pin: PB3

[output_pin fan3]
pin: PB4

#[output_pin en12v]
#pin: PG7


[temperature_sensor board]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA6
gcode_id: Board

[adc_temperature v]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor voltage]
sensor_pin: PA4
sensor_type: v
gcode_id: Voltage

[adc_temperature current]
temperature1: 0
voltage1: 0
temperature2: 24
voltage2: 3.3

[temperature_sensor current]
sensor_pin: PA5
sensor_type: current
gcode_id: Current

# The printer section controls high level printer settings.
[printer]
kinematics: cartesian
#   This option must be "cartesian" for cartesian printers.
max_velocity: 500
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
max_accel: 3000
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
max_z_velocity: 25
#   For cartesian printers this sets the maximum velocity (in mm/s) of
#   movement along the z axis. This setting can be used to restrict
#   the maximum speed of the z stepper motor on cartesian
#   printers. The default is to use max_velocity for max_z_velocity.
max_z_accel: 30
#   For cartesian printers this sets the maximum acceleration (in
#   mm/s^2) of movement along the z axis. It limits the acceleration
#   of the z stepper motor on cartesian printers. The default is to
#   use max_accel for max_z_accel.
#square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.


# Looking for more options? Check the example-extras.cfg file.
